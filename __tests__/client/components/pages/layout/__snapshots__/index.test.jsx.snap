// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Layout component snapshot renders 1`] = `
.c11 {
  margin: 0 auto;
  min-height: 100vh;
  padding: 32px 15px;
  width: 100vw;
  display: table-cell;
}

.c5 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  color: #294661;
  cursor: pointer;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  font-size: 12pt;
  font-weight: 300;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  opacity: 0.6;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: opacity 0.3s;
  transition: opacity 0.3s;
}

.c5:hover {
  opacity: 1;
}

.c5 span svg {
  font-size: 18pt;
  margin-right: 6px;
  padding-bottom: 3px;
  vertical-align: middle;
}

.c1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
}

.c12 {
  color: #cccccc;
  font-size: 10pt;
  font-weight: 300;
  margin-top: 60px;
  text-align: center;
}

.c12 a {
  color: inherit;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.c12 a:hover {
  -webkit-text-decoration: underline;
  text-decoration: underline;
}

.c10 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  color: #294661;
  cursor: pointer;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  font-size: 12pt;
  font-weight: 300;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  opacity: 0.6;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: opacity 0.3s;
  transition: opacity 0.3s;
}

.c10:hover {
  opacity: 1;
}

.c10 span svg {
  font-size: 18pt;
  margin-right: 6px;
  padding-bottom: 3px;
  vertical-align: middle;
}

.c3 {
  margin: 0;
}

.c4 {
  margin-bottom: 40px;
}

.c0 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  background-color: #fbfbfc;
  border: 1px solid #e9ecef;
  border-right: none;
  color: #294661;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  height: 50px;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  position: absolute;
  right: 0;
  top: 0;
  width: 50px;
  z-index: 1;
}

.c8 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  color: #294661;
  cursor: pointer;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  font-size: 12pt;
  font-weight: 300;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  opacity: 0.6;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: opacity 0.3s;
  transition: opacity 0.3s;
  font-size: 11pt;
  padding-left: 15px;
}

.c8:hover {
  opacity: 1;
}

.c8 span svg {
  font-size: 18pt;
  margin-right: 6px;
  padding-bottom: 3px;
  vertical-align: middle;
}

.c9 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  color: #294661;
  cursor: pointer;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  font-size: 12pt;
  font-weight: 300;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  opacity: 0.6;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: opacity 0.3s;
  transition: opacity 0.3s;
  font-size: 11pt;
  padding-left: 15px;
}

.c9:hover {
  opacity: 1;
}

.c9 span svg {
  font-size: 18pt;
  margin-right: 6px;
  padding-bottom: 3px;
  vertical-align: middle;
}

.c6 {
  margin-top: 15px;
  max-height: 1000px;
  overflow: hidden;
  -webkit-transition: all 0.3s;
  transition: all 0.3s;
  margin: 0;
  max-height: 0;
}

.c7 {
  margin-bottom: 8px;
}

.c2 {
  background-color: #fbfbfc;
  border-right: 1px solid #e9ecef;
  display: none;
  height: 100%;
  max-width: 200px;
  min-width: 200px;
  padding-left: 15px;
  padding-right: 10px;
  padding-top: 48px;
  width: 200px;
  z-index: 1;
}

.c13 {
  background-color: #ffffff;
  border: 1px solid #e9ecef;
  bottom: auto;
  left: 50%;
  max-width: 650px;
  outline: none;
  padding: 20px 20px 62px;
  position: absolute;
  right: auto;
  top: 43%;
  width: calc(100% - 20px);
  border-radius: 2px;
  padding-bottom: 62px;
  -webkit-transform: translate(-50%,-50%);
  -ms-transform: translate(-50%,-50%);
  transform: translate(-50%,-50%);
}

@media (min-width:768px) {
  .c11 {
    max-width: calc(100vw - 200px);
    padding: 32px 48px;
  }
}

@media (min-width:768px) {
  .c0 {
    display: none;
  }
}

@media (min-width:768px) {
  .c2 {
    display: table-cell;
    height: unset;
    position: unset;
  }
}

<Layout
  currentUser={
    Object {
      "active": true,
      "email": "hello@example.com",
      "forename": "John",
      "roles": Array [],
      "surname": "Doe",
    }
  }
  refetchCurrentUser={[MockFunction]}
>
  <styles__Slider
    onClick={[Function]}
  >
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "styles__Slider-sc-1fs86t6-6",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "align-items:center;background-color:#fbfbfc;border:1px solid #e9ecef;border-right:none;color:#294661;display:flex;height:50px;justify-content:center;position:absolute;right:0;top:0;width:50px;z-index:1;@media (min-width:",
              "768px",
              "){display:none;}",
            ],
          },
          "displayName": "styles__Slider",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "styles__Slider-sc-1fs86t6-6",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      onClick={[Function]}
    >
      <div
        className="c0"
        onClick={[Function]}
      >
        <FiMenu>
          <IconBase
            attr={
              Object {
                "fill": "none",
                "stroke": "currentColor",
                "strokeLinecap": "round",
                "strokeLinejoin": "round",
                "strokeWidth": "2",
                "viewBox": "0 0 24 24",
              }
            }
          >
            <svg
              fill="none"
              height="1em"
              stroke="currentColor"
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              style={
                Object {
                  "color": undefined,
                }
              }
              viewBox="0 0 24 24"
              width="1em"
              xmlns="http://www.w3.org/2000/svg"
            >
              <line
                key="0"
                x1="3"
                x2="21"
                y1="12"
                y2="12"
              />
              <line
                key="1"
                x1="3"
                x2="21"
                y1="6"
                y2="6"
              />
              <line
                key="2"
                x1="3"
                x2="21"
                y1="18"
                y2="18"
              />
            </svg>
          </IconBase>
        </FiMenu>
      </div>
    </StyledComponent>
  </styles__Slider>
  <styles__Container>
    <StyledComponent
      forwardedComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "styles__Container-sc-1fs86t6-1",
            "isStatic": false,
            "lastClassName": "c1",
            "rules": Array [
              "display:flex;height:100%;",
            ],
          },
          "displayName": "styles__Container",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "styles__Container-sc-1fs86t6-1",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
    >
      <div
        className="c1"
      >
        <Navigation
          active={false}
          changePassword={[Function]}
          currentUser={
            Object {
              "active": true,
              "email": "hello@example.com",
              "forename": "John",
              "roles": Array [],
              "surname": "Doe",
            }
          }
          editProfile={[Function]}
        >
          <styles__Navigation
            active={false}
            changePassword={[Function]}
            currentUser={
              Object {
                "active": true,
                "email": "hello@example.com",
                "forename": "John",
                "roles": Array [],
                "surname": "Doe",
              }
            }
            editProfile={[Function]}
          >
            <StyledComponent
              active={false}
              changePassword={[Function]}
              currentUser={
                Object {
                  "active": true,
                  "email": "hello@example.com",
                  "forename": "John",
                  "roles": Array [],
                  "surname": "Doe",
                }
              }
              editProfile={[Function]}
              forwardedComponent={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "styles__Navigation-sc-1fs86t6-11",
                    "isStatic": false,
                    "lastClassName": "c2",
                    "rules": Array [
                      "background-color:#fbfbfc;border-right:1px solid #e9ecef;display:none;height:100%;max-width:200px;min-width:200px;padding-left:15px;padding-right:10px;padding-top:48px;width:200px;z-index:1;",
                      [Function],
                      " @media (min-width:",
                      "768px",
                      "){display:table-cell;height:unset;position:unset;}",
                    ],
                  },
                  "displayName": "styles__Navigation",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "styles__Navigation-sc-1fs86t6-11",
                  "target": "div",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                }
              }
              forwardedRef={null}
            >
              <div
                className="c2"
              >
                <styles__List>
                  <StyledComponent
                    forwardedComponent={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "styles__List-sc-1fs86t6-4",
                          "isStatic": false,
                          "lastClassName": "c3",
                          "rules": Array [
                            "margin:0;",
                          ],
                        },
                        "displayName": "styles__List",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "styles__List-sc-1fs86t6-4",
                        "target": "ul",
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    forwardedRef={null}
                  >
                    <ul
                      className="c3"
                    >
                      <styles__ListItem>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "styles__ListItem-sc-1fs86t6-5",
                                "isStatic": false,
                                "lastClassName": "c4",
                                "rules": Array [
                                  "margin-bottom:40px;",
                                ],
                              },
                              "displayName": "styles__ListItem",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "styles__ListItem-sc-1fs86t6-5",
                              "target": "li",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <li
                            className="c4"
                          >
                            <styles__Anchor
                              active={false}
                              onClick={[Function]}
                            >
                              <StyledComponent
                                active={false}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "styles__Anchor-sc-1fs86t6-0",
                                      "isStatic": false,
                                      "lastClassName": "c5",
                                      "rules": Array [
                                        "
	align-items: center;
	color: #294661;
	cursor: pointer;
	display: flex;
	font-size: 12pt;
	font-weight: 300;
	justify-content: space-between;
	opacity: 0.6;
	text-decoration: none;
	transition: opacity 0.3s;

	&:hover {
		opacity: 1;
	}

	span svg {
		font-size: 18pt;
		margin-right: 6px;
		padding-bottom: 3px;
		vertical-align: middle;
	}
",
                                        " ",
                                        [Function],
                                      ],
                                    },
                                    "displayName": "styles__Anchor",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "styles__Anchor-sc-1fs86t6-0",
                                    "target": "a",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                onClick={[Function]}
                              >
                                <a
                                  className="c5"
                                  onClick={[Function]}
                                >
                                  <span>
                                    <FiUser>
                                      <IconBase
                                        attr={
                                          Object {
                                            "fill": "none",
                                            "stroke": "currentColor",
                                            "strokeLinecap": "round",
                                            "strokeLinejoin": "round",
                                            "strokeWidth": "2",
                                            "viewBox": "0 0 24 24",
                                          }
                                        }
                                      >
                                        <svg
                                          fill="none"
                                          height="1em"
                                          stroke="currentColor"
                                          strokeLinecap="round"
                                          strokeLinejoin="round"
                                          strokeWidth="2"
                                          style={
                                            Object {
                                              "color": undefined,
                                            }
                                          }
                                          viewBox="0 0 24 24"
                                          width="1em"
                                          xmlns="http://www.w3.org/2000/svg"
                                        >
                                          <path
                                            d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"
                                            key="0"
                                          />
                                          <circle
                                            cx="12"
                                            cy="7"
                                            key="1"
                                            r="4"
                                          />
                                        </svg>
                                      </IconBase>
                                    </FiUser>
                                    John
                                  </span>
                                  <FiChevronDown>
                                    <IconBase
                                      attr={
                                        Object {
                                          "fill": "none",
                                          "stroke": "currentColor",
                                          "strokeLinecap": "round",
                                          "strokeLinejoin": "round",
                                          "strokeWidth": "2",
                                          "viewBox": "0 0 24 24",
                                        }
                                      }
                                    >
                                      <svg
                                        fill="none"
                                        height="1em"
                                        stroke="currentColor"
                                        strokeLinecap="round"
                                        strokeLinejoin="round"
                                        strokeWidth="2"
                                        style={
                                          Object {
                                            "color": undefined,
                                          }
                                        }
                                        viewBox="0 0 24 24"
                                        width="1em"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <polyline
                                          key="0"
                                          points="6 9 12 15 18 9"
                                        />
                                      </svg>
                                    </IconBase>
                                  </FiChevronDown>
                                </a>
                              </StyledComponent>
                            </styles__Anchor>
                            <styles__SubList
                              active={false}
                            >
                              <StyledComponent
                                active={false}
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "styles__SubList-sc-1fs86t6-9",
                                      "isStatic": false,
                                      "lastClassName": "c6",
                                      "rules": Array [
                                        "margin-top:15px;max-height:1000px;overflow:hidden;transition:all 0.3s;",
                                        [Function],
                                      ],
                                    },
                                    "displayName": "styles__SubList",
                                    "foldedComponentIds": Array [],
                                    "render": [Function],
                                    "styledComponentId": "styles__SubList-sc-1fs86t6-9",
                                    "target": "ul",
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                              >
                                <ul
                                  className="c6"
                                >
                                  <styles__SubListItem>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "styles__SubListItem-sc-1fs86t6-10",
                                            "isStatic": false,
                                            "lastClassName": "c7",
                                            "rules": Array [
                                              "margin-bottom:8px;",
                                            ],
                                          },
                                          "displayName": "styles__SubListItem",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "styles__SubListItem-sc-1fs86t6-10",
                                          "target": "li",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <li
                                        className="c7"
                                      >
                                        <styles__SubAnchor
                                          onClick={[Function]}
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "styles__SubAnchor-sc-1fs86t6-7",
                                                  "isStatic": false,
                                                  "lastClassName": "c8",
                                                  "rules": Array [
                                                    "
	
	align-items: center;
	color: #294661;
	cursor: pointer;
	display: flex;
	font-size: 12pt;
	font-weight: 300;
	justify-content: space-between;
	opacity: 0.6;
	text-decoration: none;
	transition: opacity 0.3s;

	&:hover {
		opacity: 1;
	}

	span svg {
		font-size: 18pt;
		margin-right: 6px;
		padding-bottom: 3px;
		vertical-align: middle;
	}

	font-size: 11pt;
	padding-left: 15px;
",
                                                  ],
                                                },
                                                "displayName": "styles__SubAnchor",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "styles__SubAnchor-sc-1fs86t6-7",
                                                "target": "a",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            onClick={[Function]}
                                          >
                                            <a
                                              className="c8"
                                              onClick={[Function]}
                                            >
                                              Edit Profile
                                            </a>
                                          </StyledComponent>
                                        </styles__SubAnchor>
                                      </li>
                                    </StyledComponent>
                                  </styles__SubListItem>
                                  <styles__SubListItem>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "styles__SubListItem-sc-1fs86t6-10",
                                            "isStatic": false,
                                            "lastClassName": "c7",
                                            "rules": Array [
                                              "margin-bottom:8px;",
                                            ],
                                          },
                                          "displayName": "styles__SubListItem",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "styles__SubListItem-sc-1fs86t6-10",
                                          "target": "li",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <li
                                        className="c7"
                                      >
                                        <styles__SubAnchor
                                          onClick={[Function]}
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "styles__SubAnchor-sc-1fs86t6-7",
                                                  "isStatic": false,
                                                  "lastClassName": "c8",
                                                  "rules": Array [
                                                    "
	
	align-items: center;
	color: #294661;
	cursor: pointer;
	display: flex;
	font-size: 12pt;
	font-weight: 300;
	justify-content: space-between;
	opacity: 0.6;
	text-decoration: none;
	transition: opacity 0.3s;

	&:hover {
		opacity: 1;
	}

	span svg {
		font-size: 18pt;
		margin-right: 6px;
		padding-bottom: 3px;
		vertical-align: middle;
	}

	font-size: 11pt;
	padding-left: 15px;
",
                                                  ],
                                                },
                                                "displayName": "styles__SubAnchor",
                                                "foldedComponentIds": Array [],
                                                "render": [Function],
                                                "styledComponentId": "styles__SubAnchor-sc-1fs86t6-7",
                                                "target": "a",
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            onClick={[Function]}
                                          >
                                            <a
                                              className="c8"
                                              onClick={[Function]}
                                            >
                                              Change Password
                                            </a>
                                          </StyledComponent>
                                        </styles__SubAnchor>
                                      </li>
                                    </StyledComponent>
                                  </styles__SubListItem>
                                  <styles__SubListItem>
                                    <StyledComponent
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "styles__SubListItem-sc-1fs86t6-10",
                                            "isStatic": false,
                                            "lastClassName": "c7",
                                            "rules": Array [
                                              "margin-bottom:8px;",
                                            ],
                                          },
                                          "displayName": "styles__SubListItem",
                                          "foldedComponentIds": Array [],
                                          "render": [Function],
                                          "styledComponentId": "styles__SubListItem-sc-1fs86t6-10",
                                          "target": "li",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <li
                                        className="c7"
                                      >
                                        <styles__SubLink
                                          to="/auth/logout"
                                        >
                                          <StyledComponent
                                            forwardedComponent={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "attrs": Array [],
                                                "componentStyle": ComponentStyle {
                                                  "componentId": "styles__SubLink-sc-1fs86t6-8",
                                                  "isStatic": false,
                                                  "lastClassName": "c9",
                                                  "rules": Array [
                                                    "
	
	align-items: center;
	color: #294661;
	cursor: pointer;
	display: flex;
	font-size: 12pt;
	font-weight: 300;
	justify-content: space-between;
	opacity: 0.6;
	text-decoration: none;
	transition: opacity 0.3s;

	&:hover {
		opacity: 1;
	}

	span svg {
		font-size: 18pt;
		margin-right: 6px;
		padding-bottom: 3px;
		vertical-align: middle;
	}

	font-size: 11pt;
	padding-left: 15px;
",
                                                  ],
                                                },
                                                "displayName": "styles__SubLink",
                                                "foldedComponentIds": Array [],
                                                "propTypes": Object {
                                                  "innerRef": [Function],
                                                  "onClick": [Function],
                                                  "replace": [Function],
                                                  "target": [Function],
                                                  "to": [Function],
                                                },
                                                "render": [Function],
                                                "styledComponentId": "styles__SubLink-sc-1fs86t6-8",
                                                "target": Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "displayName": "Link",
                                                  "propTypes": Object {
                                                    "innerRef": [Function],
                                                    "onClick": [Function],
                                                    "replace": [Function],
                                                    "target": [Function],
                                                    "to": [Function],
                                                  },
                                                  "render": [Function],
                                                },
                                                "toString": [Function],
                                                "warnTooManyClasses": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            forwardedRef={null}
                                            to="/auth/logout"
                                          >
                                            <Link
                                              className="c9"
                                              to="/auth/logout"
                                            >
                                              <LinkAnchor
                                                className="c9"
                                                href="/auth/logout"
                                                navigate={[Function]}
                                              >
                                                <a
                                                  className="c9"
                                                  href="/auth/logout"
                                                  onClick={[Function]}
                                                >
                                                  Logout
                                                </a>
                                              </LinkAnchor>
                                            </Link>
                                          </StyledComponent>
                                        </styles__SubLink>
                                      </li>
                                    </StyledComponent>
                                  </styles__SubListItem>
                                </ul>
                              </StyledComponent>
                            </styles__SubList>
                          </li>
                        </StyledComponent>
                      </styles__ListItem>
                      <styles__ListItem>
                        <StyledComponent
                          forwardedComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "attrs": Array [],
                              "componentStyle": ComponentStyle {
                                "componentId": "styles__ListItem-sc-1fs86t6-5",
                                "isStatic": false,
                                "lastClassName": "c4",
                                "rules": Array [
                                  "margin-bottom:40px;",
                                ],
                              },
                              "displayName": "styles__ListItem",
                              "foldedComponentIds": Array [],
                              "render": [Function],
                              "styledComponentId": "styles__ListItem-sc-1fs86t6-5",
                              "target": "li",
                              "toString": [Function],
                              "warnTooManyClasses": [Function],
                              "withComponent": [Function],
                            }
                          }
                          forwardedRef={null}
                        >
                          <li
                            className="c4"
                          >
                            <styles__Link
                              to="/"
                            >
                              <StyledComponent
                                forwardedComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "attrs": Array [],
                                    "componentStyle": ComponentStyle {
                                      "componentId": "styles__Link-sc-1fs86t6-3",
                                      "isStatic": false,
                                      "lastClassName": "c10",
                                      "rules": Array [
                                        "
	align-items: center;
	color: #294661;
	cursor: pointer;
	display: flex;
	font-size: 12pt;
	font-weight: 300;
	justify-content: space-between;
	opacity: 0.6;
	text-decoration: none;
	transition: opacity 0.3s;

	&:hover {
		opacity: 1;
	}

	span svg {
		font-size: 18pt;
		margin-right: 6px;
		padding-bottom: 3px;
		vertical-align: middle;
	}
",
                                      ],
                                    },
                                    "displayName": "styles__Link",
                                    "foldedComponentIds": Array [],
                                    "propTypes": Object {
                                      "innerRef": [Function],
                                      "onClick": [Function],
                                      "replace": [Function],
                                      "target": [Function],
                                      "to": [Function],
                                    },
                                    "render": [Function],
                                    "styledComponentId": "styles__Link-sc-1fs86t6-3",
                                    "target": Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "displayName": "Link",
                                      "propTypes": Object {
                                        "innerRef": [Function],
                                        "onClick": [Function],
                                        "replace": [Function],
                                        "target": [Function],
                                        "to": [Function],
                                      },
                                      "render": [Function],
                                    },
                                    "toString": [Function],
                                    "warnTooManyClasses": [Function],
                                    "withComponent": [Function],
                                  }
                                }
                                forwardedRef={null}
                                to="/"
                              >
                                <Link
                                  className="c10"
                                  to="/"
                                >
                                  <LinkAnchor
                                    className="c10"
                                    href="/"
                                    navigate={[Function]}
                                  >
                                    <a
                                      className="c10"
                                      href="/"
                                      onClick={[Function]}
                                    >
                                      <span>
                                        <FiCheckCircle>
                                          <IconBase
                                            attr={
                                              Object {
                                                "fill": "none",
                                                "stroke": "currentColor",
                                                "strokeLinecap": "round",
                                                "strokeLinejoin": "round",
                                                "strokeWidth": "2",
                                                "viewBox": "0 0 24 24",
                                              }
                                            }
                                          >
                                            <svg
                                              fill="none"
                                              height="1em"
                                              stroke="currentColor"
                                              strokeLinecap="round"
                                              strokeLinejoin="round"
                                              strokeWidth="2"
                                              style={
                                                Object {
                                                  "color": undefined,
                                                }
                                              }
                                              viewBox="0 0 24 24"
                                              width="1em"
                                              xmlns="http://www.w3.org/2000/svg"
                                            >
                                              <path
                                                d="M22 11.08V12a10 10 0 1 1-5.93-9.14"
                                                key="0"
                                              />
                                              <polyline
                                                key="1"
                                                points="22 4 12 14.01 9 11.01"
                                              />
                                            </svg>
                                          </IconBase>
                                        </FiCheckCircle>
                                        Todos
                                      </span>
                                    </a>
                                  </LinkAnchor>
                                </Link>
                              </StyledComponent>
                            </styles__Link>
                          </li>
                        </StyledComponent>
                      </styles__ListItem>
                    </ul>
                  </StyledComponent>
                </styles__List>
              </div>
            </StyledComponent>
          </styles__Navigation>
        </Navigation>
        <styles__Container
          inactive={false}
          tableCell={true}
        >
          <StyledComponent
            forwardedComponent={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "styles__Container-sc-1upuse9-1",
                  "isStatic": false,
                  "lastClassName": "c11",
                  "rules": Array [
                    "margin:0 auto;min-height:100vh;padding:32px 15px;width:100vw;@media (min-width:",
                    "768px",
                    "){max-width:calc(100vw - 200px);padding:32px 48px;}",
                    [Function],
                    " ",
                    [Function],
                    " ",
                    [Function],
                  ],
                },
                "displayName": "styles__Container",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "styles__Container-sc-1upuse9-1",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            forwardedRef={null}
            inactive={false}
            tableCell={true}
          >
            <div
              className="c11"
            >
              <styles__Footer>
                <StyledComponent
                  forwardedComponent={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "attrs": Array [],
                      "componentStyle": ComponentStyle {
                        "componentId": "styles__Footer-sc-1fs86t6-2",
                        "isStatic": false,
                        "lastClassName": "c12",
                        "rules": Array [
                          "color:#cccccc;font-size:10pt;font-weight:300;margin-top:60px;text-align:center;a{color:inherit;text-decoration:none;&:hover{text-decoration underline;}}",
                        ],
                      },
                      "displayName": "styles__Footer",
                      "foldedComponentIds": Array [],
                      "render": [Function],
                      "styledComponentId": "styles__Footer-sc-1fs86t6-2",
                      "target": "p",
                      "toString": [Function],
                      "warnTooManyClasses": [Function],
                      "withComponent": [Function],
                    }
                  }
                  forwardedRef={null}
                >
                  <p
                    className="c12"
                  >
                    Developed by
                     
                    <a
                      href="https://paddl.co.uk/"
                      rel="noopener noreferrer"
                      target="_blank"
                    >
                      Paddl
                    </a>
                    .
                  </p>
                </StyledComponent>
              </styles__Footer>
            </div>
          </StyledComponent>
        </styles__Container>
      </div>
    </StyledComponent>
  </styles__Container>
  <ChangePasswordModal
    close={[Function]}
    isOpen={false}
    onSuccess={[Function]}
  >
    <Modal
      close={[Function]}
      isOpen={false}
    >
      <styles__Modal
        ariaHideApp={false}
        isOpen={false}
        onRequestClose={[Function]}
      >
        <StyledComponent
          ariaHideApp={false}
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "styles__Modal-sc-1wd5qfj-4",
                "isStatic": false,
                "lastClassName": "c13",
                "rules": Array [
                  "background-color:#ffffff;border:1px solid #e9ecef;bottom:auto;left:50%;max-width:650px;outline:none;padding:20px 20px 62px;position:absolute;right:auto;top:43%;width:calc(100% - 20px);",
                  [Function],
                ],
              },
              "defaultStyles": Object {
                "content": Object {
                  "WebkitOverflowScrolling": "touch",
                  "background": "#fff",
                  "border": "1px solid #ccc",
                  "borderRadius": "4px",
                  "bottom": "40px",
                  "left": "40px",
                  "outline": "none",
                  "overflow": "auto",
                  "padding": "20px",
                  "position": "absolute",
                  "right": "40px",
                  "top": "40px",
                },
                "overlay": Object {
                  "backgroundColor": "rgba(255, 255, 255, 0.75)",
                  "bottom": 0,
                  "left": 0,
                  "position": "fixed",
                  "right": 0,
                  "top": 0,
                },
              },
              "displayName": "styles__Modal",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "styles__Modal-sc-1wd5qfj-4",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          isOpen={false}
          onRequestClose={[Function]}
        >
          <Modal
            ariaHideApp={false}
            bodyOpenClassName="ReactModal__Body--open"
            className="c13"
            closeTimeoutMS={0}
            isOpen={false}
            onRequestClose={[Function]}
            parentSelector={[Function]}
            portalClassName="ReactModalPortal"
            role="dialog"
            shouldCloseOnEsc={true}
            shouldCloseOnOverlayClick={true}
            shouldFocusAfterRender={true}
            shouldReturnFocusAfterClose={true}
          >
            <Portal
              containerInfo={
                <div
                  class="ReactModalPortal"
                />
              }
            >
              <ModalPortal
                ariaHideApp={false}
                bodyOpenClassName="ReactModal__Body--open"
                className="c13"
                closeTimeoutMS={0}
                defaultStyles={
                  Object {
                    "content": Object {
                      "WebkitOverflowScrolling": "touch",
                      "background": "#fff",
                      "border": "1px solid #ccc",
                      "borderRadius": "4px",
                      "bottom": "40px",
                      "left": "40px",
                      "outline": "none",
                      "overflow": "auto",
                      "padding": "20px",
                      "position": "absolute",
                      "right": "40px",
                      "top": "40px",
                    },
                    "overlay": Object {
                      "backgroundColor": "rgba(255, 255, 255, 0.75)",
                      "bottom": 0,
                      "left": 0,
                      "position": "fixed",
                      "right": 0,
                      "top": 0,
                    },
                  }
                }
                isOpen={false}
                onRequestClose={[Function]}
                parentSelector={[Function]}
                portalClassName="ReactModalPortal"
                role="dialog"
                shouldCloseOnEsc={true}
                shouldCloseOnOverlayClick={true}
                shouldFocusAfterRender={true}
                shouldReturnFocusAfterClose={true}
                style={
                  Object {
                    "content": Object {},
                    "overlay": Object {},
                  }
                }
              />
            </Portal>
          </Modal>
        </StyledComponent>
      </styles__Modal>
    </Modal>
  </ChangePasswordModal>
  <EditProfileModal
    close={[Function]}
    currentUser={
      Object {
        "active": true,
        "email": "hello@example.com",
        "forename": "John",
        "roles": Array [],
        "surname": "Doe",
      }
    }
    isOpen={false}
    onSuccess={[Function]}
  >
    <Modal
      close={[Function]}
      isOpen={false}
    >
      <styles__Modal
        ariaHideApp={false}
        isOpen={false}
        onRequestClose={[Function]}
      >
        <StyledComponent
          ariaHideApp={false}
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "styles__Modal-sc-1wd5qfj-4",
                "isStatic": false,
                "lastClassName": "c13",
                "rules": Array [
                  "background-color:#ffffff;border:1px solid #e9ecef;bottom:auto;left:50%;max-width:650px;outline:none;padding:20px 20px 62px;position:absolute;right:auto;top:43%;width:calc(100% - 20px);",
                  [Function],
                ],
              },
              "defaultStyles": Object {
                "content": Object {
                  "WebkitOverflowScrolling": "touch",
                  "background": "#fff",
                  "border": "1px solid #ccc",
                  "borderRadius": "4px",
                  "bottom": "40px",
                  "left": "40px",
                  "outline": "none",
                  "overflow": "auto",
                  "padding": "20px",
                  "position": "absolute",
                  "right": "40px",
                  "top": "40px",
                },
                "overlay": Object {
                  "backgroundColor": "rgba(255, 255, 255, 0.75)",
                  "bottom": 0,
                  "left": 0,
                  "position": "fixed",
                  "right": 0,
                  "top": 0,
                },
              },
              "displayName": "styles__Modal",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "styles__Modal-sc-1wd5qfj-4",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
          isOpen={false}
          onRequestClose={[Function]}
        >
          <Modal
            ariaHideApp={false}
            bodyOpenClassName="ReactModal__Body--open"
            className="c13"
            closeTimeoutMS={0}
            isOpen={false}
            onRequestClose={[Function]}
            parentSelector={[Function]}
            portalClassName="ReactModalPortal"
            role="dialog"
            shouldCloseOnEsc={true}
            shouldCloseOnOverlayClick={true}
            shouldFocusAfterRender={true}
            shouldReturnFocusAfterClose={true}
          >
            <Portal
              containerInfo={
                <div
                  class="ReactModalPortal"
                />
              }
            >
              <ModalPortal
                ariaHideApp={false}
                bodyOpenClassName="ReactModal__Body--open"
                className="c13"
                closeTimeoutMS={0}
                defaultStyles={
                  Object {
                    "content": Object {
                      "WebkitOverflowScrolling": "touch",
                      "background": "#fff",
                      "border": "1px solid #ccc",
                      "borderRadius": "4px",
                      "bottom": "40px",
                      "left": "40px",
                      "outline": "none",
                      "overflow": "auto",
                      "padding": "20px",
                      "position": "absolute",
                      "right": "40px",
                      "top": "40px",
                    },
                    "overlay": Object {
                      "backgroundColor": "rgba(255, 255, 255, 0.75)",
                      "bottom": 0,
                      "left": 0,
                      "position": "fixed",
                      "right": 0,
                      "top": 0,
                    },
                  }
                }
                isOpen={false}
                onRequestClose={[Function]}
                parentSelector={[Function]}
                portalClassName="ReactModalPortal"
                role="dialog"
                shouldCloseOnEsc={true}
                shouldCloseOnOverlayClick={true}
                shouldFocusAfterRender={true}
                shouldReturnFocusAfterClose={true}
                style={
                  Object {
                    "content": Object {},
                    "overlay": Object {},
                  }
                }
              />
            </Portal>
          </Modal>
        </StyledComponent>
      </styles__Modal>
    </Modal>
  </EditProfileModal>
</Layout>
`;
